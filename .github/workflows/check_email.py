import imaplib
import email
from datetime import datetime
import os
import requests

# === –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ —Å–µ–∫—Ä–µ—Ç–æ–≤ ===
EMAIL = os.getenv("EMAIL")
PASSWORD = os.getenv("MAIL_PASSWORD")
TELEGRAM_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")

IMAP_SERVER = "imap.mail.ru"
IMAP_PORT = 993


def get_body(msg):
    if msg.is_multipart():
        for part in msg.walk():
            content_type = part.get_content_type()
            content_disposition = str(part.get("Content-Disposition"))

            if "attachment" not in content_disposition and "text/plain" in content_type:
                body = part.get_payload(decode=True).decode("utf-8", errors="ignore")
                return body[:2000]
    else:
        body = msg.get_payload(decode=True).decode("utf-8", errors="ignore")
        return body[:2000]
    return "(–Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞)"


def send_to_telegram(text):
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    payload = {
        "chat_id": TELEGRAM_CHAT_ID,
        "text": text,
        "parse_mode": "HTML",
        "disable_web_page_preview": True
    }
    try:
        r = requests.post(url, json=payload, timeout=10)
        if r.status_code == 200:
            print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ Telegram: {r.status_code}, {r.text}")
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: {e}")


def mark_as_read(mail, email_id):
    try:
        mail.store(email_id, '+FLAGS', '\\Seen')
        print(f"‚úÖ –ü–∏—Å—å–º–æ {email_id.decode()} –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ")
    except Exception as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ: {e}")


def decode_header(header):
    decoded_fragments = email.header.decode_header(header)
    result = ""
    for fragment, charset in decoded_fragments:
        if isinstance(fragment, bytes):
            result += fragment.decode(charset or "utf-8", errors="ignore")
        else:
            result += fragment
    return result


def check_new_emails():
    print(f"[{datetime.now()}] üîé –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø–æ—á—Ç–µ: {EMAIL}")
    
    try:
        mail = imaplib.IMAP4_SSL(IMAP_SERVER, IMAP_PORT)
        mail.login(EMAIL, PASSWORD)
        print("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ –ø–æ—á—Ç—É")
        
        status, _ = mail.select("INBOX")
        if status != "OK":
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å INBOX")
            return

        # –ü–æ–∫–∞–∂–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∏—Å–µ–º
        status, total = mail.search(None, "ALL")
        print(f"üì¨ –í—Å–µ–≥–æ –ø–∏—Å–µ–º –≤ INBOX: {len(total[0].split()) if total[0] else 0}")

        # –ò—â–µ–º –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
        status, messages = mail.search(None, "UNSEEN")
        email_ids = messages[0].split() if messages[0] else []

        if not email_ids:
            print("üì≠ –ù–µ—Ç –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –ø–∏—Å–µ–º")
        else:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(email_ids)} –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –ø–∏—Å–µ–º. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...")

            for email_id in email_ids:
                try:
                    _, msg_data = mail.fetch(email_id, '(RFC822)')
                    raw = msg_data[0][1]
                    msg = email.message_from_bytes(raw)

                    subject = decode_header(msg["Subject"]) if msg["Subject"] else "–ë–µ–∑ —Ç–µ–º—ã"
                    sender = msg["From"]

                    body = get_body(msg)

                    text = f"""
üì¨ <b>–ù–æ–≤–æ–µ –ø–∏—Å—å–º–æ</b>
üìß –û—Ç: {sender}
üìå –¢–µ–º–∞: {subject}
üìÑ –¢–µ–∫—Å—Ç:
{body}
                    """.strip()

                    send_to_telegram(text)
                    mark_as_read(mail, email_id)

                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∏—Å—å–º–∞ {email_id}: {e}")

        mail.close()
        mail.logout()
        print("üîö –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        raise


if __name__ == "__main__":
    if not EMAIL:
        print("‚ùó EMAIL –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –ø—Ä–æ–≤–µ—Ä—å —Å–µ–∫—Ä–µ—Ç—ã")
    if not PASSWORD:
        print("‚ùó MAIL_PASSWORD –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –ø—Ä–æ–≤–µ—Ä—å —Å–µ–∫—Ä–µ—Ç—ã")
    if not TELEGRAM_BOT_TOKEN:
        print("‚ùó TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –ø—Ä–æ–≤–µ—Ä—å —Å–µ–∫—Ä–µ—Ç—ã")
    if not TELEGRAM_CHAT_ID:
        print("‚ùó TELEGRAM_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –ø—Ä–æ–≤–µ—Ä—å —Å–µ–∫—Ä–µ—Ç—ã")

    if not all([EMAIL, PASSWORD, TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID]):
        print("‚ùå –ù–µ –≤—Å–µ —Å–µ–∫—Ä–µ—Ç—ã –ø–µ—Ä–µ–¥–∞–Ω—ã. –í—ã—Ö–æ–¥.")
        exit(1)

    check_new_emails()
