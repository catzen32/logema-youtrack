import imaplib
import email
from datetime import datetime
import os
import smtplib
from email.mime.text import MIMEText
import requests

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Å–µ–∫—Ä–µ—Ç–æ–≤ ===
EMAIL = os.getenv("EMAIL")
PASSWORD = os.getenv("MAIL_PASSWORD")  # –ü–∞—Ä–æ–ª—å –æ—Ç –ø–æ—á—Ç—ã mail.ru
TELEGRAM_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")
ALLOWED_SENDER = os.getenv("SENDER_EMAIL")  # –¢–æ–ª—å–∫–æ –æ—Ç —ç—Ç–æ–≥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è

IMAP_SERVER = "imap.mail.ru"
IMAP_PORT = 993


def get_body(msg):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –ø–∏—Å—å–º–∞ (—Ç–µ–∫—Å—Ç–æ–≤—É—é —á–∞—Å—Ç—å)"""
    if msg.is_multipart():
        for part in msg.walk():
            content_type = part.get_content_type()
            content_disposition = str(part.get("Content-Disposition"))

            if "attachment" not in content_disposition and "text/plain" in content_type:
                body = part.get_payload(decode=True).decode("utf-8", errors="ignore")
                return body[:2000]  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è Telegram
    else:
        body = msg.get_payload(decode=True).decode("utf-8", errors="ignore")
        return body[:2000]
    return "(–Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞)"


def send_to_telegram(text):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    payload = {
        "chat_id": TELEGRAM_CHAT_ID,
        "text": text,
        "parse_mode": "HTML",
        "disable_web_page_preview": True
    }
    try:
        requests.post(url, json=payload, timeout=10)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")


def mark_as_read(mail, email_id):
    """–û—Ç–º–µ—á–∞–µ—Ç –ø–∏—Å—å–º–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ"""
    try:
        mail.store(email_id, '+FLAGS', '\\Seen')
        print(f"‚úÖ –ü–∏—Å—å–º–æ {email_id.decode()} –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ")
    except Exception as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ: {e}")


def check_new_emails():
    print(f"[{datetime.now()}] –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –ø–∏—Å–µ–º –Ω–∞ mail.ru...")

    try:
        mail = imaplib.IMAP4_SSL(IMAP_SERVER, IMAP_PORT)
        mail.login(EMAIL, PASSWORD)
        mail.select("INBOX")

        # –ò—â–µ–º –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –ø–∏—Å—å–º–∞
        status, messages = mail.search(None, 'UNSEEN')
        email_ids = messages[0].split()

        if not email_ids:
            print("üì≠ –ù–µ—Ç –Ω–æ–≤—ã—Ö –ø–∏—Å–µ–º.")
        else:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(email_ids)} –Ω–æ–≤—ã—Ö –ø–∏—Å–µ–º. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...")

            for email_id in email_ids:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –ø–∏—Å—å–º–æ
                    _, msg_data = mail.fetch(email_id, '(RFC822)')
                    raw_email = msg_data[0][1]
                    msg = email.message_from_bytes(raw_email)

                    subject = msg["Subject"] or "–ë–µ–∑ —Ç–µ–º—ã"
                    sender = msg["From"] or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

                    # –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ç–µ–º—É, –µ—Å–ª–∏ –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∞
                    subject = decode_header_value(subject)

                    body = get_body(msg)

                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
                    telegram_text = f"""
üì¨ <b>–ù–æ–≤–æ–µ –ø–∏—Å—å–º–æ</b>
üìß –û—Ç: {sender}
üìå –¢–µ–º–∞: {subject}
üìÑ –¢–µ–∫—Å—Ç:
{body}
                    """.strip()

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
                    send_to_telegram(telegram_text)

                    # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
                    mark_as_read(mail, email_id)

                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∏—Å—å–º–∞ {email_id}: {e}")
                    continue

        mail.close()
        mail.logout()

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø–æ—á—Ç–µ: {e}")
        raise


def decode_header_value(header):
    """–î–µ–∫–æ–¥–∏—Ä—É–µ—Ç –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç–µ–º—É –ø–∏—Å—å–º–∞)"""
    decoded_fragments = email.header.decode_header(header)
    decoded_string = ""
    for fragment, charset in decoded_fragments:
        if isinstance(fragment, bytes):
            decoded_string += fragment.decode(charset or 'utf-8', errors='ignore')
        else:
            decoded_string += fragment
    return decoded_string


if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    if not all([EMAIL, PASSWORD, TELEGRAM_TOKEN, TELEGRAM_CHAT_ID]):
        print("‚ùó –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å secrets.")
        exit(1)

    check_new_emails()
