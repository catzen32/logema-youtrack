import imaplib
import email
from datetime import datetime
import os
import requests
import re
from bs4 import BeautifulSoup  # –ù—É–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å


def extract_youtrack_link(body):
    """
    –ò—â–µ—Ç –≤—Ç–æ—Ä—É—é —Å—Å—ã–ª–∫—É, –Ω–∞—á–∏–Ω–∞—é—â—É—é—Å—è —Å https://youtrack.logema.org/
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (—Ç–µ–∫—Å—Ç_—Å—Å—ã–ª–∫–∏, —Å—Å—ã–ª–∫–∞)
    """
    soup = BeautifulSoup(body, 'html.parser')
    links = soup.find_all('a', href=True)
    youtrack_links = [link for link in links if link['href'].startswith("https://youtrack.logema.org/")]

    if len(youtrack_links) >= 2:
        link = youtrack_links[1]
        return link.get_text(strip=True), link['href']
    elif len(youtrack_links) == 1:
        link = youtrack_links[0]
        return link.get_text(strip=True), link['href']
    else:
        return None, None


def extract_second_td_text(body):
    """
    –ò—â–µ—Ç –≤—Ç–æ—Ä–æ–π <td> —Å –Ω—É–∂–Ω—ã–º —Å—Ç–∏–ª–µ–º –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∏–∑ –Ω–µ–≥–æ —á–∏—Å—Ç—ã–π —Ç–µ–∫—Å—Ç
    """
    soup = BeautifulSoup(body, 'html.parser')
    tds = soup.find_all('td', style=re.compile(r'padding: 12px 16px;background: rgb\(240, 240, 240\)'))
    
    if len(tds) >= 2:
        td = tds[1]
        # –£–¥–∞–ª—è–µ–º —Ç–µ–≥–∏, –∫–∞—Ä—Ç–∏–Ω–∫–∏, —Å—Å—ã–ª–∫–∏ ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
        for img in td.find_all('img'):
            img.decompose()
        for a in td.find_all('a'):
            a.replace_with(a.get_text())  # –ó–∞–º–µ–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –µ—ë —Ç–µ–∫—Å—Ç
        return td.get_text(strip=False).strip()
    elif len(tds) == 1:
        td = tds[0]
        for img in td.find_all('img'):
            img.decompose()
        for a in td.find_all('a'):
            a.replace_with(a.get_text())
        return td.get_text(strip=False).strip()
    return None


def send_to_telegram(text):
    print(f"üîß –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram: {text[:50]}...")
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {
        "chat_id": TELEGRAM_CHAT_ID,
        "text": text,
        "parse_mode": "HTML",
        "disable_web_page_preview": False
    }
    try:
        response = requests.post(url, json=payload, timeout=15)
        print(f"üì® –°—Ç–∞—Ç—É—Å: {response.status_code}, –æ—Ç–≤–µ—Ç: {response.text}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")


def mark_as_read(mail, email_id):
    try:
        mail.store(email_id, '+FLAGS', '\\Seen')
        print(f"‚úÖ –ü–∏—Å—å–º–æ {email_id.decode()} –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ: {e}")


def decode_header(header):
    decoded_parts = email.header.decode_header(header)
    result = ""
    for part, charset in decoded_parts:
        if isinstance(part, bytes):
            result += part.decode(charset or "utf-8", errors="ignore")
        else:
            result += part
    return result


def check_new_emails():
    print(f"[{datetime.now()}] üîé –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—á—Ç—ã: {EMAIL}")
    try:
        mail = imaplib.IMAP4_SSL(IMAP_SERVER, IMAP_PORT)
        mail.login(EMAIL, PASSWORD)
        print("‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω")

        mail.select("INBOX")
        _, messages = mail.search(None, "UNSEEN")
        email_ids = messages[0].split() if messages[0] else []

        if not email_ids:
            print("üì≠ –ù–µ—Ç –Ω–æ–≤—ã—Ö –ø–∏—Å–µ–º")
            return

        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(email_ids)} –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –ø–∏—Å–µ–º")

        for email_id in email_ids:
            try:
                _, msg_data = mail.fetch(email_id, '(RFC822)')
                raw = msg_data[0][1]
                msg = email.message_from_bytes(raw)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
                sender = msg.get("From", "")
                if ALLOWED_SENDER not in sender:
                    print(f"üìß –ü—Ä–æ–ø—É—Å–∫ –ø–∏—Å—å–º–∞ –æ—Ç: {sender}")
                    continue

                # –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ç–µ–º—É
                subject = decode_header(msg["Subject"]) if msg["Subject"] else "–ë–µ–∑ —Ç–µ–º—ã"

                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–ª–æ –ø–∏—Å—å–º–∞
                body = ""
                if msg.is_multipart():
                    for part in msg.walk():
                        if part.get_content_type() == "text/html":
                            body = part.get_payload(decode=True).decode("utf-8", errors="ignore")
                            break
                else:
                    if msg.get_content_type() == "text/html":
                        body = msg.get_payload(decode=True).decode("utf-8", errors="ignore")

                if not body:
                    print("‚ö†Ô∏è –¢–µ–ª–æ –ø–∏—Å—å–º–∞ –ø—É—Å—Ç–æ–µ")
                    mark_as_read(mail, email_id)
                    continue

                # –ò—â–µ–º –≤—Ç–æ—Ä—É—é —Å—Å—ã–ª–∫—É –Ω–∞ YouTrack
                link_text, link_url = extract_youtrack_link(body)
                if not link_url:
                    print("‚ùå –°—Å—ã–ª–∫–∞ –Ω–∞ YouTrack –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                    mark_as_read(mail, email_id)
                    continue

                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –≤—Ç–æ—Ä–æ–≥–æ <td>
                td_text = extract_second_td_text(body)
                if not td_text:
                    td_text = "–¢–µ–∫—Å—Ç –∏–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –∏–∑–≤–ª–µ—á—ë–Ω."

                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
                telegram_text = f"""
{td_text}

<a href="{link_url}">–ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–¥–∞—á–µ</a>
                """.strip()

                print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º: {link_text}")
                send_to_telegram(telegram_text)
                mark_as_read(mail, email_id)

            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∏—Å—å–º–∞: {e}")

        mail.logout()
        print("üîö –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        raise
