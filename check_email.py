import imaplib
import email
from datetime import datetime
import os
import requests
import re

# === –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ —Å–µ–∫—Ä–µ—Ç–æ–≤ ===
EMAIL = os.getenv("EMAIL")
PASSWORD = os.getenv("MAIL_PASSWORD")
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")
ALLOWED_SENDER = os.getenv("SENDER_EMAIL")  # –¢–æ–ª—å–∫–æ –ø–∏—Å—å–º–∞ –æ—Ç —ç—Ç–æ–≥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è

print(f"üîç ALLOWED_SENDER: '{ALLOWED_SENDER}'")

IMAP_SERVER = "imap.mail.ru"
IMAP_PORT = 993


def extract_youtrack_link(body):
    """
    –ò—â–µ—Ç –≤—Ç–æ—Ä—É—é —Å—Å—ã–ª–∫—É, –Ω–∞—á–∏–Ω–∞—é—â—É—é—Å—è —Å https://youtrack.logema.org/
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (—Ç–µ–∫—Å—Ç_—Å—Å—ã–ª–∫–∏, —Å—Å—ã–ª–∫–∞)
    """
    pattern = r'<a[^>]+href="([^"]+)"[^>]*>([^<]+)</a>'
    matches = re.findall(pattern, body, re.IGNORECASE)
    youtrack_links = [m for m in matches if m[0].startswith("https://youtrack.logema.org/")]
    if len(youtrack_links) >= 2:
        link_info = youtrack_links[1]  # –í—Ç–æ—Ä–∞—è —Å—Å—ã–ª–∫–∞
        return link_info[1].strip(), link_info[0]
    elif len(youtrack_links) == 1:
        return youtrack_links[0][1].strip(), youtrack_links[0][0]
    else:
        return None, None


def extract_text_from_second_tr(body):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ –≤—Ç–æ—Ä–æ–≥–æ <tr> –≤ –ø–∏—Å—å–º–µ.
    –£–¥–∞–ª—è–µ—Ç <img>, <a> –∏ –¥—Ä—É–≥–∏–µ —Ç–µ–≥–∏, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ —á–∏—Å—Ç—ã–π —Ç–µ–∫—Å—Ç.
    """
    # –ò—â–µ–º –≤—Å–µ <tr> –≤ –ø–∏—Å—å–º–µ
    tr_pattern = r'<tr[^>]*>(.*?)</tr>'
    matches = re.findall(tr_pattern, body, re.DOTALL | re.IGNORECASE)

    if len(matches) < 2:
        return None  # –ù–µ—Ç –≤—Ç–æ—Ä–æ–≥–æ tr

    second_tr_content = matches[1]  # –ë–µ—Ä—ë–º –≤—Ç–æ—Ä–æ–π <tr>

    # –£–¥–∞–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    clean_text = re.sub(r'<img[^>]*>', '', second_tr_content)
    # –ó–∞–º–µ–Ω—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏—Ö —Ç–µ–∫—Å—Ç
    clean_text = re.sub(r'<a[^>]*>([^<]*)</a>', r'\1', clean_text)
    # –£–¥–∞–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ HTML-—Ç–µ–≥–∏
    clean_text = re.sub(r'<[^>]+>', '', clean_text)
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã
    clean_text = re.sub(r'\s+', ' ', clean_text).strip()

    return clean_text if clean_text else None


def send_to_telegram(text):
    print(f"üîß –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram: {text[:50]}...")
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {
        "chat_id": TELEGRAM_CHAT_ID,
        "text": text,
        "parse_mode": "HTML",
        "disable_web_page_preview": False
    }
    try:
        response = requests.post(url, json=payload, timeout=15)
        print(f"üì® –°—Ç–∞—Ç—É—Å: {response.status_code}, –æ—Ç–≤–µ—Ç: {response.text}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")


def mark_as_read(mail, email_id):
    try:
        mail.store(email_id, '+FLAGS', '\\Seen')
        print(f"‚úÖ –ü–∏—Å—å–º–æ {email_id.decode()} –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ: {e}")


def decode_header(header):
    decoded_parts = email.header.decode_header(header)
    result = ""
    for part, charset in decoded_parts:
        if isinstance(part, bytes):
            result += part.decode(charset or "utf-8", errors="ignore")
        else:
            result += part
    return result


def check_new_emails():
    print(f"[{datetime.now()}] üîé –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—á—Ç—ã: {EMAIL}")
    try:
        mail = imaplib.IMAP4_SSL(IMAP_SERVER, IMAP_PORT)
        mail.login(EMAIL, PASSWORD)
        print("‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω")

        mail.select("INBOX")
        _, messages = mail.search(None, "UNSEEN")
        email_ids = messages[0].split() if messages[0] else []

        if not email_ids:
            print("üì≠ –ù–µ—Ç –Ω–æ–≤—ã—Ö –ø–∏—Å–µ–º")
            return

        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(email_ids)} –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –ø–∏—Å–µ–º")

        for email_id in email_ids:
            try:
                _, msg_data = mail.fetch(email_id, '(RFC822)')
                raw = msg_data[0][1]
                msg = email.message_from_bytes(raw)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
                sender = msg.get("From", "")
                if ALLOWED_SENDER and ALLOWED_SENDER not in sender:
                    print(f"üìß –ü—Ä–æ–ø—É—Å–∫ –ø–∏—Å—å–º–∞ –æ—Ç: {sender}")
                    continue

                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–ª–æ –ø–∏—Å—å–º–∞
                body = ""
                if msg.is_multipart():
                    for part in msg.walk():
                        if part.get_content_type() == "text/html":
                            body = part.get_payload(decode=True).decode("utf-8", errors="ignore")
                            break
                else:
                    if msg.get_content_type() == "text/html":
                        body = msg.get_payload(decode=True).decode("utf-8", errors="ignore")

                if not body:
                    print("‚ö†Ô∏è –¢–µ–ª–æ –ø–∏—Å—å–º–∞ –ø—É—Å—Ç–æ–µ")
                    mark_as_read(mail, email_id)
                    continue

                # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                link_text, link_url = extract_youtrack_link(body)
                if not link_url:
                    print("‚ùå –°—Å—ã–ª–∫–∞ –Ω–∞ YouTrack –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                    mark_as_read(mail, email_id)
                    continue

                tr_text = extract_text_from_second_tr(body)
                if not tr_text:
                    tr_text = ""  # –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º, –µ—Å–ª–∏ –ø—É—Å—Ç–æ

                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
                telegram_text = f"{link_text}".strip()

                if tr_text:
                    telegram_text += f"\n\n{tr_text}"

                telegram_text += f"\n\n<a href='{link_url}'>–ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–¥–∞—á–µ</a>"

                print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º: {link_text}")
                send_to_telegram(telegram_text)
                mark_as_read(mail, email_id)

            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∏—Å—å–º–∞: {e}")

        mail.logout()
        print("üîö –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        raise


if __name__ == "__main__":
    if not all([EMAIL, PASSWORD, TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID, ALLOWED_SENDER]):
        print("‚ùó –ù–µ –≤—Å–µ —Å–µ–∫—Ä–µ—Ç—ã –∑–∞–¥–∞–Ω—ã!")
        exit(1)
    check_new_emails()
